use crate::token::Token;
use crate::ast::{Expr, Stmt};
use crate::operator::{UnaryOperator, BinaryOperator};
use crate::lexer::Location;
use crate::error::LexicalError;

grammar<'s>;

pub Program: Vec<Stmt<'s>> = {
    Body,
};

Body: Vec<Stmt<'s>> = {
    <stmts: Stmt*> => stmts,
}

Stmt: Stmt<'s> = {
    <var:var> "=" <value:Expr> ";" => Stmt::Assign { var, value },
    "PRINT" <values:Expr*> ";" => Stmt::Print { values, newline: false, wait: false },
    "PRINTL" <values:Expr*> ";" => Stmt::Print { values, newline: true, wait: false },
    "만약" <cond:Expr> "{" <body:Body> "}" <elseifstmts:ElseIfStmt*> <elsestmt:ElseStmt?> => { 
        let mut arms = elseifstmts;
        arms.insert(0, (cond, body));
        Stmt::If {
            arms,
            other: elsestmt.unwrap_or_default(),
        }
    },
    "반복" <cond:Expr> "{" <body:Body> "}" => Stmt::While { cond, body },
    <Expr> ";" => Stmt::Expression(<>),
    <Stmt> ";" => <>,
}

ElseIfStmt: (Expr<'s>, Vec<Stmt<'s>>) = {
    "혹은" <cond:Expr> "{" <body:Body> "}" => (cond, body),
}

ElseStmt: Vec<Stmt<'s>> = {
    "그외" "{" <body:Body> "}" => body,
}

#[inline]
ExprList: Vec<Expr<'s>> = {
    <elements: ExprWithComma+> => elements,
}

#[inline]
ExprWithComma: Expr<'s> = {
    <expr:Expr> ","? => {
        expr
    }
}

Expr: Expr<'s> = {
    <lhs:Expr> <op:BoolOp> <rhs:ArithmeticExpr> => lhs.binary_op(rhs, op),
    ArithmeticExpr,
}

BoolOp: BinaryOperator = {
    ">" => BinaryOperator::Greater,
    ">=" => BinaryOperator::GreaterOrEqual,
    "<" => BinaryOperator::Less,
    "<=" => BinaryOperator::LessOrEqual,
    "==" => BinaryOperator::Equal,
    "!=" => BinaryOperator::NotEqual,
    "&" => BinaryOperator::And,
    "|" => BinaryOperator::Or,
    "^" => BinaryOperator::Xor,
}

ArithmeticExpr: Expr<'s> = {
    <lhs:ArithmeticExpr> <op:AddOp> <rhs:Factor> => lhs.binary_op(rhs, op),
    Factor,
}

AddOp: BinaryOperator = {
    "+" => BinaryOperator::Add,
    "-" => BinaryOperator::Sub,
}

Factor: Expr<'s> = {
    <lhs:Factor> <op:MulOp> <rhs:Term> => lhs.binary_op(rhs, op),
    Term,
}

MulOp: BinaryOperator = {
    "*" => BinaryOperator::Mul,
    "/" => BinaryOperator::Div,
    "%" => BinaryOperator::Rem,
}

Term: Expr<'s> = {
    <value:number> => Expr::Number(value),
    <value:string> => Expr::String(value),
    <var:var> => Expr::Variable(var),
    "!" <Term> => <>.unary_op(UnaryOperator::Not),
    "(" <Expr> ")",
}

extern {
    type Location = Location;
    type Error = LexicalError;

    enum Token<'s> {
        "만약" => Token::If,
        "혹은" => Token::ElseIf,
        "그외" => Token::Else,
        "반복" => Token::While,
        "PRINT" => Token::Print,
        "PRINTL" => Token::PrintLine,
        "PRINTW" => Token::PrintWait,
        "{" => Token::OpenBrace,
        "}" => Token::CloseBrace,
        "(" => Token::OpenParan,
        ")" => Token::CloseParan,

        "+" => Token::BinaryOp(BinaryOperator::Add),
        "-" => Token::BinaryOp(BinaryOperator::Sub),

        "*" => Token::BinaryOp(BinaryOperator::Mul),
        "/" => Token::BinaryOp(BinaryOperator::Div),
        "%" => Token::BinaryOp(BinaryOperator::Rem),

        "&" => Token::BinaryOp(BinaryOperator::And),
        "|" => Token::BinaryOp(BinaryOperator::Or),
        "^" => Token::BinaryOp(BinaryOperator::Xor),

        ">" => Token::BinaryOp(BinaryOperator::Greater),
        ">=" => Token::BinaryOp(BinaryOperator::GreaterOrEqual),
        "<" => Token::BinaryOp(BinaryOperator::Less),
        "<=" => Token::BinaryOp(BinaryOperator::LessOrEqual),
        "!=" => Token::BinaryOp(BinaryOperator::NotEqual),
        "==" => Token::BinaryOp(BinaryOperator::Equal),

        "!" => Token::UnaryOp(UnaryOperator::Not),
        "=" => Token::Assign,
        ";" => Token::SemiColon,
        "," => Token::Comma,
        number => Token::IntLit(<u32>),
        string => Token::StrLit(<&'s str>),
        var => Token::Variable(<&'s str>),
    }
} 

